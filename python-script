from __future__ import print_function
import os
import json
import csv
import hone
import ast
import pymongo
import pprint

from apiclient import discovery
from httplib2 import Http
from oauth2client import file, client, tools
from jsonschema import validate
from pymongo import MongoClient
from sshtunnel import SSHTunnelForwarder

# must have ssh setup with MongoDB in order to connect

print("Connecting to MongoDB...")

client = MongoClient(host="localhost", port=9876)
db = client["samples"]
coll = db["test"]

try:
  db.command("serverStatus")
except Exception as e: print(e)
else:
  print("You are connected!")

# need to download document as a txt file using Google APIs
# part of this code was taken from wescpy.blogspot.com
# must have Google APIs set up with Google account, see Google Drive APIs Quickstart for help

SCOPES = 'https://www.googleapis.com/auth/drive.readonly'
store = file.Storage('storage.json')
creds = store.get()
if not creds or creds.invalid:
  flow = client.flow_from_clientsecrets('client_secret.json', SCOPES)
  creds = tools.run_flow(flow, store)
DRIVE = discovery.build('drive', 'v3', http=creds.authorize(Http()))

FILENAME = str(input("Please enter filename: "))
SRC_MIMETYPE = 'application/vnd.google-apps.spreadsheet' # source file type
DST_MIMETYPE = 'text/csv' # exported file type

# finds file in Google Drive
files = DRIVE.files().list(
  q='name="%s" and mimeType="%s"' % (FILENAME, SRC_MIMETYPE),
  orderBy='modifiedTime desc,name').execute().get('files', [])

if files: # if file was found
  fn = '%s.csv' % os.path.splitext(files[0]['name'].replace(' ', '_'))[0] # create csv file with underscores
  print('Exporting "%s" as "%s"... ' % (files[0]['name'], fn), end='')
  data = DRIVE.files().export(fileId=files[0]['id'], mimeType=DST_MIMETYPE).execute()
  if data:
    with open(fn, 'wb') as f:
      f.write(data)
    print('DONE') # done exporting as csv file
    Hone = hone.Hone() # convert csv file to nested json format, result is a list
    schema = Hone.get_schema(fn)
    result = Hone.convert(fn)
    as_string = json.dumps(result) # convert resulting list into string
    replace_all_dashes = as_string.replace('-', '_') # replace dashes with underscores
    final_result = json.loads(replace_all_dashes) # convert string back into list of dictionaries
    # since result is a list, iterate validation over each item:
    for data in final_result:
      with open('validation_schema.txt', 'r') as file: # must have updated validation schema saved as txt file
        loaded_schema = file.read()
        validation_schema = ast.literal_eval(loaded_schema)
        validate(data, validation_schema)
        print('Validation complete!') # prints only if no error occurs on validation step
        doc_id = coll.insert_one(data).inserted_id # insert validated schema into MongoDB, only occurs if there is no error
        print('The ID for this document is: ', doc_id)
  else:
    print('ERROR (could not download file)')
else:
  print('ERROR: file not found')
